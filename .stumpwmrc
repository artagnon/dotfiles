;; -*- mode: Lisp; mode: StumpWM -*-

;; Utility functions
(defun swap-groups (group1 group2)
  (rotatef (slot-value group1 'number) (slot-value group2 'number)))

(defun move-group-forward (&optional (group (current-group)))
  (swap-groups group (next-group group (sort-groups (current-screen)))))

(defun move-group-backward (&optional (group (current-group)))
  (swap-groups group (next-group group (reverse (sort-groups (current-screen))))))

;; StumpWM commands
(define-stumpwm-command "gforward" ()
  (move-group-forward)
  (echo-groups (current-screen) *group-format*))

(define-stumpwm-command "gbackward" ()
  (move-group-backward)
  (echo-groups (current-screen) *group-format*))

;; Windowlist and group switching bindings
(define-key *top-map* (kbd "s-w") "windowlist")
(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")

;; Custom commands
(define-key *top-map* (kbd "s-SPC") "exec plait --pause")

;; defprogram-shortcuts
(defprogram-shortcut emacs :command "emacs" :key (kbd "s-e"))
(defprogram-shortcut chrome :command "google-chrome" :key (kbd "s-c") :props '(:class "Google-chrome"))
(defprogram-shortcut urxvt :command "urxvt" :key (kbd "s-u") :props '(:class  "URxvt"))
(defprogram-shortcut gimp :command "gimp" :key (kbd "s-g"))
(defprogram-shortcut linuxdcpp :command "linuxdcpp" :key (kbd "s-d") :props '(:class "Linuxdcpp"))
(defprogram-shortcut picard :command "picard" :key (kbd "s-p") :props '(:title "MusicBrainz Picard"))

;; Keybindings
(define-key *groups-map* (kbd "n") "gnewbg")
